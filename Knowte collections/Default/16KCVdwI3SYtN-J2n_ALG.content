{"ops":[{"insert":"El método de filtrado consiste en filtrar registros específicos de un conjunto de registros. Por ejemplo: realizó una búsqueda de todos los socios que están activos, pero ahora desea filtrar esos registros y obtener solo los clientes:\n\ncustomer_ids = active_partner_ids.filtered (socio lambda: socio.customer == True)"},{"attributes":{"code-block":true},"insert":"\n\n"},{"insert":"    @api.multi"},{"attributes":{"code-block":true},"insert":"\n"},{"insert":"    @api.depends('move_raw_ids.quantity_done', 'move_raw_ids.product_uom_qty')"},{"attributes":{"code-block":true},"insert":"\n"},{"insert":"    def _compute_consumed_less_than_planned(self):"},{"attributes":{"code-block":true},"insert":"\n"},{"insert":"        for order in self:"},{"attributes":{"code-block":true},"insert":"\n"},{"insert":"            order.consumed_less_than_planned = any(order.move_raw_ids.filtered("},{"attributes":{"code-block":true},"insert":"\n"},{"insert":"                lambda move: float_compare(move.quantity_done,"},{"attributes":{"code-block":true},"insert":"\n"},{"insert":"                                           move.product_uom_qty,"},{"attributes":{"code-block":true},"insert":"\n"},{"insert":"                                           precision_rounding=move.product_uom.rounding) == -1)"},{"attributes":{"code-block":true},"insert":"\n\n"}]}